// Kerning
// --------------------------------------------------
.kerning_v1() {
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  -webkit-text-size-adjust: none; /* prevent webkit from resizing text to fit */
  font-size: 100%;
  text-rendering: optimizeLegibility;
}

// Fonts
// --------------------------------------------------
#font {
  .all(@family, @size, @style, @weight) {
    #calc > .rem(font-size, @size);

    font-family: @family;
    font-style: @style;
    font-weight: @weight;
  }
  .short(@size, @weight) {
    #calc > .rem(font-size, @size);

    font-weight: @weight;
  }
}

// Input placeholders color
// --------------------------------------------------
.placeholder(@color) {
  &::-webkit-input-placeholder {
    /* WebKit, Blink, Edge */
    color: @color;
  }

  &:-moz-placeholder {
    /* Firefox 4 to 18 */
    color: @color;
    opacity: 1;
  }

  &::-moz-placeholder {
    /* Firefox 19+ */
    color: @color;
    opacity: 1;
  }

  &:-ms-input-placeholder {
    /* Internet Explorer 10-11 */
    color: @color;
  }
}

// Calculator
// Works with: font-size, height, line-height,
// margin, padding and width.
// --------------------------------------------------
#calc {
  .rem(@property, @u) when (isstring(@u)) {
    @{property}: @u;
  }
  .rem(@property, @u) {
    @{property}: unit(round(@u / 10, 1), rem);
  }
  .remPair(@property, @tb, @rl) {
    @{property}: unit(round(@tb / 10, 1), rem) unit(round(@rl / 10, 1), rem);
  }
  .remClock(@property, @t, @r, @b, @l) {
    @{property}: unit(round(@t / 10, 1), rem) unit(round(@r / 10, 1), rem) unit(round(@b / 10, 1), rem) unit(round(@l / 10, 1), rem);
  }
}

// Make list flat
// --------------------------------------------------
.resetList() {
  list-style: none;
  margin: 0;
  padding: 0;
}

// Make button flat
// --------------------------------------------------
.resetButton() {
  background: transparent;
  border: none;
}

// Animation
// --------------------------------------------------
.animation(@params...) {
  -webkit-animation: @params;
  animation: @params;
}

// Gradient
// Use: .gradient(linear; @grayDarker, darken(@grayDarker, 3%) 100%; 45deg);
// --------------------------------------------------
.gradient(@type; @colors; @dir: 0deg; @prefixes: webkit, moz, ms, o; @index: length(@prefixes)) when (@index > 0) {
  .gradient(@type; @colors; @dir; @prefixes; (@index - 1));
  @prefix: extract(@prefixes, @index);
  @dir-old: 90 - (@dir);

  background-image: ~"-@{prefix}-@{type}-gradient(@{dir-old}, @{colors})";

  & when ( @index = length(@prefixes) ) {
    background-image: ~"@{type}-gradient(@{dir}, @{colors})";
  }
}

// Transform
// --------------------------------------------------
.transform(@params...) {
  -webkit-transform: @params;
  transform: @params;
}

// Transition
// --------------------------------------------------
.transition(@params...) {
  -webkit-transition: @params;
  transition: @params;
}

// Align things vertically
// --------------------------------------------------
.alignV(@position: absolute) {
  position: @position;
  top: 50%;
  .transform(translate(0, -50%));
}

// Align things horizontally
// --------------------------------------------------
.alignH(@position: absolute) {
  left: 50%;
  position: @position;
  .transform(translate(-50%, 0));
}

// Center things
// --------------------------------------------------
.alignC(@position: absolute) {
  left: 50%;
  top: 50%;
  position: @position;
  .transform(translate(-50%, -50%));
}

// Hide only visually, but have it available for screen readers
// --------------------------------------------------
.visuallyHidden() {
  border: 0 !important;
  clip: rect(0 0 0 0) !important;
  height: 1px !important;
  left: 0 !important;
  margin: -1px !important;
  overflow: hidden !important;
  padding: 0 !important;
  position: absolute !important;
  top: 0 !important;
  width: 1px !important;
}
